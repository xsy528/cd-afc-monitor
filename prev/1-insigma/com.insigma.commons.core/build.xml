<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!-- $Source: $                                                              -->
<!-- $Revision: Insigma sprint 0930 $                                        -->
<!-- Date: Wednesday 5 May 2010 $                                          -->
<!--                                                                         -->
<!-- CopyRight ? ZHEJIANG ZHEDA INSIGMA RAIL TRANSPORTATION ENGINEERING      -->
<!-- CO.,LTD                                                                 -->
<!--                                                                         -->
<!-- Ant buildfile for build project                                         -->
<!--                                                                         -->
<!-- ======================================================================= -->
<project basedir="." default="release" name="com.insigma.commons.core">

	<!-- define project build name -->
	<tstamp>
	<format property="BUILD_TIME"
	pattern="yyyyMMddHHmmss"
	offset="0" unit="minute"/>
	</tstamp>
	<property name="build.name" value="com.insigma.commons.core" />
	<!-- get environment reference property -->
	<property environment="env" />
	<property name="project.version" value="${env.version}" />
	<property name="build.version" value="${env.BUILD_NUMBER}" />
	<!-- set ant_home findbugs_home -->
	<property name="ANT_HOME" value="${env.ANT_HOME}" />
	<property name="FINDBUGS_HOME" value="${env.FINDBUGS_HOME}" />
	
	<!-- workspace properties -->
	<property name="insigma.wsdir" value="${basedir}/.." />
	<property name="project" value="${insigma.wsdir}/${ant.project.name}" />
	<property name="InsigmaLib.name" value="InsigmaLib" />
	<property name="project.build.mark" value=".build_done" />

	<!-- common properties -->
	<property name="debuglevel" value="source,lines,vars" />
	<property name="optimize" value="on" />
	<property name="deprecation" value="on" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />


	<!-- findbugs property-->
	<property name="findbugs.file.name" value="findbugs-1.9.4" />
	<property name="findbugs.home" value="${FINDBUGS_HOME}" />
	<property name="findbugs-outfile-name" value="${ant.project.name}-findbugs.html" />
	<property name="findbugs-outxml-name" value="${ant.project.name}-findbugs.xml" />
	

	<import file="${basedir}/libs.xml" />
	
	<!-- Introduce ant-contrib -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir="${ANT_HOME}/lib">
				<include name="*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<!-- Introduce FindBugs-->
	<taskdef name="FindBugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
			<pathelement location="${FINDBUGS_HOME}/lib/findbugs-ant.jar" />
		</classpath>
	</taskdef>

	<!-- Introduce Emma-->
	<path id="emma.lib">
		<pathelement location="${ANT_HOME}/lib/emma.jar" />
		<pathelement location="${ANT_HOME}/lib/emma_ant.jar" />
	</path>

	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<!--  target: property-init    -->
	<target name="property-init">
		<!-- distribution property -->
		<property name="dist.top" value="${insigma.wsdir}/distribution" />
		<property name="dist.division" value="${dist.top}/SigmaFare_${project.version}" />

		<property name="dist" value="${dist.division}/${ant.project.name}" />
		<property name="dist.docs.dir" value="${dist.top}/docs" />

		<!-- source properties -->
		<property name="src" location="${project}/src" />
		<property name="test" value="${project}/test" />
		<property name="test.src" value="${test}/local/src" />
		<property name="test.res" value="${test}/local/res" />

		<!-- resource properties -->
		<property name="res" location="${project}/res" />
		<property name="res.test" location="${project}/test/local/res" />

		<!-- build properties -->
		<property name="build" location="${project}/build" />
		<property name="build.src" location="${build}/src" />
		<property name="build.test" value="${build}/test" />
		<property name="build.src.avail" value="${src.build.avail}" />
		<property name="build.test.build" location="${build.test}/build" />

		<!-- document properties -->
		<property name="doc" location="${project}/docs" />
		<property name="doc.test" location="${doc}/test" />
		<property name="doc.test.junit.output" location="${doc.test}/junit" />
		<property name="doc.test.junit.result" location="${doc.test}/result" />
		<property name="doc.test.junit.report" location="${doc.test}/report" />

		<!-- emma properties-->
		<property name="bin.instrument.dir" location="${doc}/instrument" />
		<property name="coverage-dir-name" value="coverage" />
		<property name="emma.coverage.dir" value="${doc}/${coverage-dir-name}" />

		<!-- javadoc properties -->
		<property name="javadoc.packages" value="*" />

		<!--make distribution dir -->
		<mkdir dir="${dist.top}/Insigma" />
			

		<!--define jar-name properties -->
		<property name="jar.name.src" value="${build.name}-${project.version}b${build.version}-v${BUILD_TIME}.jar" />
		<!-- define classpath -->
		<path id="classpath.compile">
			<path refid="projectLib.classpath" />
		</path>

		<path id="classpath.junit">
			<path refid="projectLib.classpath" />
			<pathelement location="${build.src}" />
			<pathelement location="${build.test.build}" />
			<pathelement location="${res}" />
			<pathelement location="${res.test}" />
		</path>

		<path id="classpath.run">
			<path refid="projectLib.classpath" />
			<pathelement location="${build.src}" />
			<pathelement location="${res}" />
		</path>

	</target>


	<!--  target: test-compile     -->
	<target name="test-compile" depends="compile" if="test-avail">
		<property name="dist.test" value="${project}/dist/test" />
		<property name="dist.test.bin" value="${dist.test}/bin" />
		<property name="dist.test.lib" value="${dist.test}/lib" />
		<property name="dist.test.conf" value="${dist.test}/conf" />
		<property name="dist.test.scripts" value="${dist.test}/scripts" />

		<!-- test whether tests should be executed -->
		<if>
			<and>
				<available file="${test.src}" type="dir" />
			</and>
			<then>
				<mkdir dir="${doc}" />
				<mkdir dir="${build.test.build}" />
				<mkdir dir="${doc.test}" />
				<mkdir dir="${doc.test.junit.output}" />
				<mkdir dir="${doc.test.junit.result}" />
				<mkdir dir="${doc.test.junit.report}" />

				<!-- logical test compile -->
				<javac encoding="utf-8" debug="on" srcdir="${test.src}" destdir="${build.test.build}" source="${source}" target="${target}">
					<classpath refid="classpath.junit" />
				</javac>
				<property name="test-build-avail" value="true" />
			</then>
			<else />
		</if>
	</target>

	<!--  target: compile          -->
	<target name="compile" depends="property-init" description="compile current project.">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.src}" />
		<mkdir dir="${project}/dist/test" />

		<echo message="compiling ${ant.project.name}: ${ant.file}" />
		<javac encoding="UTF-8" debug="true" debuglevel="${debuglevel}" destdir="${build.src}" fork="true" source="${source}" target="${target}" failonerror="true">
			<src path="${src}" />
			<classpath refid="classpath.compile" />
		</javac>
			<if>
				<equals arg1="${build.src.avail}" arg2="true" />
			  <then>
				<copy todir="${build.src}">
				    <fileset dir="${src}" includes="**/*.java" />
				</copy>
				<echo message="project ${ant.project.name} copy src complete!" />
			  </then>
		    </if>	
		<echo message="project ${ant.project.name} compilation complete!" />

		<!-- inform test task -->
		<available file="${test}" type="dir" property="test-avail" />
	</target>

	<!--  target: findBugs         -->
	<target name="findbugs" depends="compile" description="use the findBugs tool">
		<FindBugs home="${findbugs.home}" output="xml" outputFile="${doc}/${findbugs-outxml-name}">
			<class location="${build.src}" />
			<sourcePath path="${src}"  />
		</FindBugs>
	</target>

	<!--  target: emma-instrument  -->
	<target name="emma-instrument" depends="property-init" description="turns on EMMA instrumentation/reporting">
		<property name="emma.enabled" value="true" />
		<mkdir dir="${bin.instrument.dir}" />
		<mkdir dir="${emma.coverage.dir}" />

		<emma enabled="${emma.enabled}">
			<instr destdir="${bin.instrument.dir}" metadatafile="${emma.coverage.dir}/metadata.emma" merge="false">
				<instrpath>
					<pathelement location="${build.src}" />
				</instrpath>
			</instr>
		</emma>
	</target>

	<!--  target: unit-test       -->
	<target name="unit-test" depends="test-compile,emma-instrument" if="test-build-avail" description="execute unit test case and execute the emma ">
		<!-- run test case -->
		<property name="emma.enabled" value="true" />
		<junit printsummary="on" fork="true" dir="${project}" haltonfailure="false" failureproperty="tests.failed" showoutput="true">
			<jvmarg value="-Dlog4j.configuration=log4j.properties" />
			<jvmarg value="-Demma.coverage.out.file=${emma.coverage.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
			<classpath location="${bin.instrument.dir}" />
			<classpath refid="emma.lib" />
			<formatter type="xml" usefile="true" />
			<classpath refid="classpath.junit" />

			<batchtest todir="${doc.test.junit.output}">
				<fileset dir="${build.test.build}">
					<include name="**/Test*.class" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${doc.test.junit.result}">
			<fileset dir="${doc.test.junit.output}">
				<include name="**/*.xml" />
			</fileset>
			<report format="frames" todir="${doc.test.junit.report}" />
		</junitreport>

		<if>
			<available file="${emma.coverage.dir}/metadata.emma" type="file" />
			<then>
				<!-- generate emma coverage report >-->
				<emma enabled="${emma.enabled}">
					<report>
						<sourcepath>
							<pathelement location="${src}" />
							<pathelement location="${test.src}" />
						</sourcepath>
						<fileset dir="${emma.coverage.dir}">
							<include name="*.emma" />
						</fileset>
						<txt outfile="${emma.coverage.dir}/coverage.txt" />
						<html outfile="${emma.coverage.dir}/coverage.html" />
						<xml outfile="${emma.coverage.dir}/coverage.xml" depth="method" />
					</report>
				</emma>
			</then>
			<else>

			</else>
		</if>

		<!-- copy junit test result to outer directory to make sure the path
		             of junit documents stable, for the purpose of hudson -->
		<mkdir dir="${dist.docs.dir}" />
		<copy todir="${dist.docs.dir}">
			<fileset dir="${doc}" />
		</copy>

		<fail if="tests.failed"> =============================================
		One or more tests failed, check the report for detail...
		============================================================= </fail>
	</target>

	<!--  target: copy-report-to-dirstribution -->
	<target name="copy-report-to-dirstribution" depends="property-init" description="copy the checkstyle,findbugs,and emma reoprt to the distribution's report dir">
		<copy todir="${project}/dist/test/conf">
			<fileset dir="${test.res}" includes="**/*.*" />
		</copy>

		<mkdir dir="${distribution.report}" />

		<echo>${ant.project.name}-emma</echo>
		<copy includeemptydirs="false" todir="${distribution.report}">
			<fileset dir="${doc}" />
		</copy>
	</target>

	<!--  target: build-jar        -->
	<target name="build" depends="compile,test-compile,findbugs,unit-test" description="package current project to dist directory.">
		<!-- Create the build directory -->
		<mkdir dir="${build}" />
		<mkdir dir="${build.src}" />

		<!-- Create the distribution directory -->
		<mkdir dir="${project}/dist" />
		<mkdir dir="${project}/dist/bin" />
		<mkdir dir="${project}/dist/sbin" />
		<mkdir dir="${project}/dist/lib" />
		<mkdir dir="${project}/dist/scripts" />
		<mkdir dir="${project}/dist/conf" />

		<!-- package ${res} folder -->

		<available file="${res}" type="dir" property="build.res.avail" />

		<if>
			<equals arg1="${build.res.avail}" arg2="true" />
			<then>
				<jar destfile="${project}/dist/bin/${jar.name.src}" compress="true" encoding="UTF8" update="false" duplicate="preserve" index="true" manifestencoding="UTF8">
					<fileset dir="${build.src}" />
					<fileset file="${project}/src.patch" />
					<fileset dir="${src}" includes="**/*.xml" />
					<fileset dir="${src}">
						<include name="**/*.properties" />
					</fileset>

					<fileset dir="${res}" />
					<fileset file="${project}/res.patch" />
					<manifest>
						<attribute name="Manifest-Version" value="${project.version}" />
						<attribute name="ContainEncodable" value="true" />
						<attribute name="Built-By" value="insigma.com" />
						<section name="common">
							<attribute name="Project-Title" value="${ant.project.name}" />
							<attribute name="Project-type" value="res" />
							<attribute name="Project-Version" value="${env.SVN_REVISION}" />
							<attribute name="Project-Organization" value="Insigma.com" />
							<attribute name="Product" value="InsigmaFare" />
						</section>
					</manifest>
				</jar>
				<copy todir="${dist.top}/Insigma" file="${project}/dist/bin/${jar.name.src}">
				</copy>
			</then>
			<else>
				<jar destfile="${project}/dist/bin/${jar.name.src}" compress="true" encoding="UTF8" update="false" duplicate="preserve" index="true" manifestencoding="UTF8">
					<fileset dir="${build.src}" />
					<fileset file="${project}/src.patch" />
					<fileset dir="${src}" includes="**/*.xml" />
					<fileset dir="${src}">
						<include name="**/*.properties" />
					</fileset>

					<manifest>
						<attribute name="Manifest-Version" value="${project.version}" />
						<attribute name="ContainEncodable" value="true" />
						<attribute name="Built-By" value="insigma.com" />
						<section name="common">
							<attribute name="Project-Title" value="${ant.project.name}" />
							<attribute name="Project-type" value="res" />
							<attribute name="Project-Version" value="${env.SVN_REVISION}" />
							<attribute name="Project-Organization" value="Insigma.com" />
							<attribute name="Product" value="InsigmaFare" />
						</section>
					</manifest>
				</jar>
				<copy todir="${dist.top}/Insigma" file="${project}/dist/bin/${jar.name.src}">
				</copy>
			</else>
		</if>

		<!-- mark build operation -->
		<touch file="${project}/${project.build.mark}" />

	</target>

	<!--  target: release              -->
	<target name="release" depends="property-init,force-clean-all,build" description="description">
	</target>

	<target name="force-clean-all" depends="property-init" description="manually clean up all">

		<!-- Delete the distribution directory -->
		<echo message="Delete the distribution directory----------------------------" />
		<delete dir="${dist.top}" />

		<!-- Delete the ${build} and ${dist} and ${doc} directory tree for
	             all projects -->
		<for param="proj.dir">
			<dirset dir="${insigma.wsdir}">
				<include name="*" />
				<exclude name="distribution" />
				<exclude name=".metadata" />
				<exclude name="${InsigmaLib.name}" />
			</dirset>
			<sequential>
				<delete dir="@{proj.dir}/build" />
				<delete dir="@{proj.dir}/dist" />
				<delete dir="@{proj.dir}/docs" />
				<delete file="@{proj.dir}/${project.build.mark}" />
				<echo>Project @{proj.dir} cleaned.</echo>
			</sequential>
		</for>
	</target>

</project>
